plugins {
    id "com.jfrog.bintray" version "1.8.2"
    id "com.github.dcendents.android-maven" version "2.1"
    id 'com.github.kt3k.coveralls' version '2.5.0-x'
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: "de.mannodermaus.android-junit5"

ext {
    libraryVersionCode = 25
    libraryVersionName = '3.0.0-RC2'

    //Bintray and Maven
    bintrayRepo = 'maven'
    bintrayName = 'frag-nav'

    publishedGroupId = 'com.ncapdevi'
    libraryName = 'FragNav'
    artifact = 'frag-nav'

    libraryDescription = 'A library to help manage multiple fragment stacks'

    siteUrl = 'https://github.com/ncapdevi/FragNav'
    gitUrl = 'https://github.com/ncapdevi/FragNav.git'

    developerId = 'ncapdevi'
    developerName = 'Nic Capdevila'
    developerEmail = 'ncapdevi@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    lintOptions{
        abortOnError false
    }
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.compileSdkVersion
        versionCode libraryVersionCode
        versionName libraryVersionName
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
        junitPlatform {
            // The JUnit Jupiter dependency version to use
            jupiterVersion "5.2.0"

            // The JUnit Vintage Engine dependency version to use
            vintageVersion "5.2.0"

            filters {
                engines {
                    include 'spek'
                }
            }
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation "com.android.support:support-fragment:$rootProject.ext.supportVersion"
    implementation "com.android.support:support-annotations:$rootProject.ext.supportVersion"

    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    testImplementation "org.mockito:mockito-core:2.19.0"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.0.0-alpha04"
    testImplementation "org.robolectric:robolectric:3.8"

    testImplementation 'org.amshove.kluent:kluent-android:1.38'

    // Spek

    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testImplementation ('org.jetbrains.spek:spek-api:1.1.5') {
        exclude group: 'org.jetbrains.kotlin'
    }
    testImplementation ('org.jetbrains.spek:spek-junit-platform-engine:1.1.5') {
        exclude group: 'org.junit.platform'
        exclude group: 'org.jetbrains.kotlin'
    }

    testCompileOnly junit5.unitTestsRuntime()
    testImplementation junit5.unitTests()
}

group = publishedGroupId                               // Maven Group ID for the artifact

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}


version = libraryVersionName

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

/*    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }*/
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

/*task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}*/

artifacts {
   // archives javadocJar
    archives sourcesJar
}

// Bintray
bintray {
    Properties properties = new Properties()
    if (project.rootProject.file('local.properties').exists()) {
        properties.load(project.rootProject.file('local.properties').newDataInputStream())

        user = properties.getProperty("bintray.user")
        key = properties.getProperty("bintray.apikey")

        configurations = ['archives']
        pkg {
            repo = bintrayRepo
            name = bintrayName
            desc = libraryDescription
            websiteUrl = siteUrl
            vcsUrl = gitUrl
            licenses = allLicenses
            publish = true
            publicDownloadNumbers = true
            version {
                desc = libraryDescription
            }
        }
    }
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/coverage/debug/report.xml"
}

tasks.coveralls {
    dependsOn 'connectedAndroidTest'
    onlyIf { System.env.'CI' }
}
task createPom {
    pom {
        project {
            packaging 'aar'

            name project.name
            description libraryDescription
            url siteUrl
            inceptionYear '2016'

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                }
            }
            scm {
                connection gitUrl
                developerConnection gitUrl
                url siteUrl
            }
            developers {
                developer {
                    id 'ncapdevi'
                    name 'Nic Capdevila'
                    email 'ncapdevi@gmail.com'
                }
            }
        }
    }.writeTo("$buildDir/poms/pom-default.xml").writeTo("pom.xml")
}
build.dependsOn createPom
repositories {
    mavenCentral()
}